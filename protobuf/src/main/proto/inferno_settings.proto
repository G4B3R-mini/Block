syntax = "proto2";

option java_package = "com.shmibblez.inferno.proto";
option java_multiple_files = true;

message InfernoSettings {


  // todo: add missing settings, renumber when complete


  /*** vars ***/


  optional uint64 numberOfAppLaunches = 1;
  optional uint64 lastBrowseActivityMs = 2;


  /*** toolbar settings ***/


  enum VerticalToolbarPosition {
    TOOLBAR_BOTTOM = 0;
    TOOLBAR_TOP = 1;
  }
  enum ToolbarItem {
    TOOLBAR_ITEM_SETTINGS = 0;
    TOOLBAR_ITEM_ORIGIN = 1;
    TOOLBAR_ITEM_ORIGIN_MINI = 2;
    TOOLBAR_ITEM_BACK = 3;
    TOOLBAR_ITEM_FORWARD = 4;
    TOOLBAR_ITEM_RELOAD = 5;
    TOOLBAR_ITEM_HISTORY = 6;
    TOOLBAR_ITEM_REQUEST_DESKTOP = 7;
    TOOLBAR_ITEM_FIND_IN_PAGE = 8;
    TOOLBAR_ITEM_REQUEST_READER_VIEW = 9;
    TOOLBAR_ITEM_PRIVATE_MODE = 10;
    TOOLBAR_ITEM_SHOW_TABS_TRAY = 11;
    TOOLBAR_ITEM_SHARE = 12;
    TOOLBAR_ITEM_MENU = 13;
    TOOLBAR_ITEM_EXTENSIONS = 14;
    TOOLBAR_ITEM_PASSWORDS = 15;
  }

  // general
  optional VerticalToolbarPosition toolbarVerticalPosition = 3 [default = TOOLBAR_BOTTOM];
  optional VerticalToolbarPosition inAppToolbarVerticalPosition = 4 [default = TOOLBAR_BOTTOM];
  repeated ToolbarItem toolbarItems = 5;
  repeated ToolbarItem toolbarMenuItems = 88;


  /*** tab settings ***/


  enum VerticalTabBarPosition {
    TAB_BAR_BOTTOM = 0;
    TAB_BAR_TOP = 1;
  }
  enum TabTrayStyle {
    TAB_TRAY_LIST = 0;
    TAB_TRAY_GRID = 1;
  }
  enum TabBarPosition {
    TAB_BAR_ABOVE_TOOLBAR = 0;
    TAB_BAR_BELOW_TOOLBAR = 1;
  }
  enum CloseTabsMethod {
    CLOSE_TABS_MANUALLY = 0;
    CLOSE_TABS_AFTER_ONE_DAY = 1;
    CLOSE_TABS_AFTER_ONE_WEEK = 2;
    CLOSE_TABS_AFTER_ONE_MONTH = 3;
  }
  enum MiniTabShowClose {
    MINI_TAB_SHOW_ON_ALL = 0;
    MINI_TAB_SHOW_ONLY_ON_ACTIVE = 1;
    MINI_TAB_SHOW_ON_NONE = 2;
  }

  // general
  optional CloseTabsMethod closeTabsMethod = 17 [default = CLOSE_TABS_MANUALLY];
  //  uint32 closeTabsAfterDays = 5; // todo: test with custom time in MS first, replacing settings.getTabTimeout() in BrowserApplication
  optional bool shouldSeparateInactiveTabs = 18 [default = false];
  //  uint32 makeTabsInactiveAfterDays = 22;

  // tab bar
  optional bool isTabBarEnabled = 19 [default = true];
  optional MiniTabShowClose miniTabShowClose = 20 [default = MINI_TAB_SHOW_ON_ALL];
  optional VerticalTabBarPosition tabBarVerticalPosition = 21 [default = TAB_BAR_BOTTOM];
  optional TabBarPosition tabBarPosition = 22 [default = TAB_BAR_ABOVE_TOOLBAR];

  // tab tray
  optional TabTrayStyle tabTrayStyle = 23 [default = TAB_TRAY_LIST];


  /*** search settings ***/


  // address bar settings
  // todo: make enum
  optional string defaultSearchEngine = 6;
  // todo: custom search engine map { [engine name]: [engine data] }
  optional bool shouldAutocompleteUrls = 7 [default = true];
  optional bool shouldAutocompleteUrlsInPrivate = 8 [default = true];
  optional bool shouldShowSearchSuggestions = 9 [default = true];
  optional bool shouldShowSearchSuggestionsInPrivate = 10 [default = true];
  optional bool shouldShowHistorySuggestions = 11 [default = true];
  optional bool shouldShowBookmarkSuggestions = 12 [default = true];
  optional bool shouldShowSyncedTabsSuggestions = 13 [default = true];
  optional bool shouldShowClipboardSuggestions = 14 [default = true];
  optional bool shouldShowVoiceSearch = 15 [default = true];
  //  bool shouldShowSearchShortcuts = 16; // on awesomebar, not used, might need to add later?
  // bool showSponsoredSuggestions = ?; // sponsored not enabled


  /*** theme settings ***/


  // colors set in kotlin, in InfernoTheme object
  enum DefaultTheme {
    // default dark theme
    INFERNO_DARK = 0;
    // default light theme
    INFERNO_LIGHT = 1;
    // pays homage to our one true guardian and savior mozilla
    MOZILLA_INCOGNITO_DARK = 2;
    // the great moz
    MOZILLA_INCOGNITO_LIGHT = 3;
  }
  message InfernoTheme {
    // todo: define and use colors, take a look at material for some naming ideas
    // in settings show description for where each color is shown
    required string name = 1;
    required uint64 timeSet = 2;
    required uint32 primaryTextColor = 3;
    required uint32 secondaryTextColor = 4;
    required uint32 primaryIconColor = 5;
    required uint32 secondaryIconColor = 6;
    required uint32 primaryOutlineColor = 7;
    required uint32 secondaryOutlineColor = 8;
    required uint32 primaryActionColor = 9;
    required uint32 secondaryActionColor = 10;
    required uint32 errorColor = 11;
    required uint32 primaryBackgroundColor = 12;
    required uint32 secondaryBackgroundColor = 13;
  }

  optional DefaultTheme selectedDefaultTheme = 28 [default = INFERNO_DARK];
  optional string selectedCustomTheme = 29 [default = ""];
  optional bool useSameThemeForNormalAndPrivate = 87 [default = true];
  optional DefaultTheme selectedDefaultThemePrivate = 30 [default = MOZILLA_INCOGNITO_DARK];
  optional string selectedCustomThemePrivate = 31 [default = ""];
  // { [theme name set by user]: [theme data] }
  map<string, InfernoTheme> customThemes = 32;


  /*** gesture settings ***/

  enum GestureAction {
    GESTURE_ACTION_NONE = 0;
    GESTURE_ACTION_TAB_RIGHT = 1;
    GESTURE_ACTION_TAB_LEFT = 2;
    GESTURE_ACTION_RELOAD_TAB = 3;
    GESTURE_ACTION_PAGE_FORWARD = 4;
    GESTURE_ACTION_PAGE_BACK = 5;
    GESTURE_ACTION_CLOSE_TAB = 6;
    GESTURE_ACTION_NEW_TAB_TO_RIGHT = 7;
    GESTURE_ACTION_NEW_TAB_TO_LEFT = 8;
    GESTURE_ACTION_NEW_TAB_END = 9;
    GESTURE_ACTION_NEW_TAB_START = 10;
    // GESTURE_ACTION_REOPEN_LAST_CLOSED_TAB = 11; // HOW TO DO THIS?
  }

  optional bool isPullToRefreshEnabled = 24 [default = true];
  optional bool isDynamicToolbarEnabled = 25 [default = true];
  // sets if swipe up and down on toolbar and tab bar do the same thing
  optional bool shouldUnifyToolbarAndTabBarGestures = 26 [default = true];

  // toolbar gestures
  optional GestureAction toolbarGestureSwipeLeft = 73 [default = GESTURE_ACTION_NONE];
  optional GestureAction toolbarGestureSwipeRight = 74 [default = GESTURE_ACTION_NONE];
  optional GestureAction toolbarGestureSwipeUp = 75 [default = GESTURE_ACTION_NONE];
  optional GestureAction toolbarGestureSwipeDown = 76 [default = GESTURE_ACTION_NONE];

  // tab bar gestures
  optional GestureAction tabBarGestureSwipeUp = 77 [default = GESTURE_ACTION_NONE];
  optional GestureAction tabBarGestureSwipeDown = 78 [default = GESTURE_ACTION_NONE];


  /*** home screen settings ***/


  enum PageWhenBrowserReopened {
    OPEN_ON_LAST_TAB = 0;
    OPEN_ON_HOME_ALWAYS = 1;
    OPEN_ON_HOME_AFTER_FOUR_HOURS = 2;
  }

  message CustomHomeSite {
    required string name = 1;
    required string url = 2;
  }

  // general
  optional bool defaultTopSitesAdded = 33 [default = true];
  optional bool shouldShowTopSites = 34 [default = true];
  // bool contile = ? // sponsored suggestions not shown
  optional bool shouldShowRecentTabs = 35 [default = true];
  optional bool shouldShowBookmarks = 36 [default = true];
  // bool showPocketRecommendations = ? // pocket recommendations not implemented
  // bool showPocketSponsoredStories = ? // pocket recommendations not implemented
  optional bool shouldShowHistory = 37 [default = true];
  optional bool shouldShowSearchWidget = 38 [default = true];

  // navigation
  optional PageWhenBrowserReopened pageWhenBrowserReopened = 39 [default = OPEN_ON_LAST_TAB];
  optional bool shouldUseInfernoHome = 40 [default = true];
  optional string customHomeUrl = 41 [default = "https://web.tabliss.io"];


  /*** on quit ***/


  // on quit
  optional bool deleteBrowsingDataOnQuit = 42 [default = false];
  optional bool deleteOpenTabsOnQuit = 43 [default = false];
  optional bool deleteBrowsingHistoryOnQuit = 44 [default = false];
  optional bool deleteCookiesAndSiteDataOnQuit = 45 [default = false];
  optional bool deleteCachesOnQuit = 46 [default = false];
  optional bool deletePermissionsOnQuit = 47 [default = false];
  optional bool deleteDownloadsOnQuit = 48 [default = false];

  // other
  optional bool shouldUseExternalDownloadManager = 49 [default = false]; // todo: add to prefs
  optional bool remoteDebuggingOverUsb = 50 [default = false]; // todo: add to prefs


  /*** autofill data ***/


  // login storage
  optional bool isAddressSaveAndAutofillEnabled = 55 [default = true];
  optional bool isCardSaveAndAutofillEnabled = 56 [default = true];
  optional bool shouldSyncCards = 57 [default = true];
  optional bool isLoginSaveAndAutofillEnabled = 51 [default = true];
  optional bool shouldSyncLogins = 52 [default = true];
  optional bool isAndroidAutofillEnabled = 54 [default = true]; // autofill in other apps
  // managed in Core by LoginExceptionStorage


  /*** site settings ***/


  // site settings
  enum AppLinks {
    APP_LINKS_ASK_TO_OPEN = 0;
    APP_LINKS_ALLOWED = 1;
    APP_LINKS_BLOCKED = 2;
  }
  enum AutoPlay {
    BLOCK_AUDIO_ONLY = 0;
    BLOCK_AUDIO_AND_VIDEO = 1;
    ALLOW_AUDIO_AND_VIDEO = 2;
    BLOCK_AUDIO_AND_VIDEO_ON_CELLULAR_DATA_ONLY = 3;
  }
  enum Camera {
    CAMERA_ASK_TO_ALLOW = 0;
    CAMERA_ALLOWED = 1;
    CAMERA_BLOCKED = 2;
  }
  enum Location {
    LOCATION_ASK_TO_ALLOW = 0;
    LOCATION_ALLOWED = 1;
    LOCATION_BLOCKED = 2;
  }
  enum Microphone {
    MICROPHONE_ASK_TO_ALLOW = 0;
    MICROPHONE_ALLOWED = 1;
    MICROPHONE_BLOCKED = 2;
  }
  enum Notifications {
    NOTIFICATIONS_ASK_TO_ALLOW = 0;
    NOTIFICATIONS_ALLOWED = 1;
    NOTIFICATIONS_BLOCKED = 2;
  }
  enum PersistentStorage {
    PERSISTENT_STORAGE_ASK_TO_ALLOW = 0;
    PERSISTENT_STORAGE_ALLOWED = 1;
    PERSISTENT_STORAGE_BLOCKED = 2;
  }
  enum CrossSiteCookies {
    CROSS_SITE_COOKIES_ASK_TO_ALLOW = 0;
    CROSS_SITE_COOKIES_ALLOWED = 1;
    CROSS_SITE_COOKIES_BLOCKED = 2;
  }
  enum DrmControlledContent {
    DRM_CONTROLLED_CONTENT_ASK_TO_ALLOW = 0;
    DRM_CONTROLLED_CONTENT_ALLOWED = 1;
    DRM_CONTROLLED_CONTENT_BLOCKED = 2;
  }

  // site permissions
  optional AppLinks appLinksSetting = 58 [default = APP_LINKS_ASK_TO_OPEN];
  optional AutoPlay autoplaySetting = 59 [default = BLOCK_AUDIO_ONLY];
  optional Camera cameraSetting = 60 [default = CAMERA_ASK_TO_ALLOW];
  optional Location locationSetting = 61 [default = LOCATION_ASK_TO_ALLOW];
  optional Microphone microphoneSetting = 62 [default = MICROPHONE_ASK_TO_ALLOW];
  optional Notifications notificationsSetting = 63 [default = NOTIFICATIONS_ASK_TO_ALLOW];
  optional PersistentStorage persistentStorageSetting = 64 [default = PERSISTENT_STORAGE_ASK_TO_ALLOW];
  optional CrossSiteCookies crossSiteCookiesSetting = 65 [default = CROSS_SITE_COOKIES_ASK_TO_ALLOW];
  optional DrmControlledContent drmControlledContentSetting = 66 [default = DRM_CONTROLLED_CONTENT_ASK_TO_ALLOW];
  // exceptions managed through Core by PermissionStorage


  /*** accessibility ***/


  optional bool shouldSizeFontAutomatically = 67 [default = true];
  optional float fontSizeFactor = 68 [default = 1];
  optional bool shouldForceEnableZoomInWebsites = 69 [default = false];
  optional bool alwaysRequestDesktopSite = 70 [default = false];


  /*** locale/language is set through Storage with LocaleManager ***/


  /*** translation is managed through browserStore with TranslationsAction ***/


  optional bool downloadLanguagesInDataSavingMode = 86 [default = false];


  /*** privacy & security ***/


  // private mode
  optional bool openLinksInPrivateTab = 71 [default = false];
  optional bool allowScreenshotsInPrivateMode = 72 [default = false];


  // enhanced tracking protection settings
  enum TrackingProtectionDefault {
    STANDARD = 0;
    STRICT = 1;
    CUSTOM = 2;
  }
  message CustomTrackingProtection {
    enum CookiePolicy {
      ISOLATE_CROSS_SITE_COOKIES = 0;
      CROSS_SITE_AND_SOCIAL_MEDIA_TRACKERS = 1;
      COOKIES_FROM_UNVISITED_SITES = 2;
      ALL_THIRD_PARTY_COOKIES = 3;
      ALL_COOKIES = 4;
    }
    enum TrackingContentSelection {
      BLOCK_TRACKING_NORMAL_ONLY = 0;
      BLOCK_TRACKING_PRIVATE_ONLY = 1;
      BLOCK_TRACKING_NORMAL_AND_PRIVATE = 2;
    }
    enum SuspectedFingerprintersSelection {
      BLOCK_SUSPECTED_FINGERPRINTERS_NORMAL_ONLY = 0;
      BLOCK_SUSPECTED_FINGERPRINTERS_PRIVATE_ONLY = 1;
      BLOCK_SUSPECTED_FINGERPRINTERS_NORMAL_AND_PRIVATE = 2;
    }
    optional bool blockCookies = 81 [default = true];
    optional CookiePolicy blockCookiesPolicy = 73 [default = ISOLATE_CROSS_SITE_COOKIES];
    optional bool blockTrackingContent = 74 [default = true];
    optional TrackingContentSelection blockTrackingContentSelection = 82 [default = BLOCK_TRACKING_PRIVATE_ONLY];
    optional bool blockCryptominers = 76 [default = true];
    optional bool blockKnownFingerprinters = 77 [default = true];
    optional bool blockRedirectTrackers = 78 [default = true];
    optional bool blockSuspectedFingerprinters = 79 [default = true];
    optional SuspectedFingerprintersSelection blockSuspectedFingerprintersSelection = 80 [default = BLOCK_SUSPECTED_FINGERPRINTERS_PRIVATE_ONLY];
  }

  optional bool isEnhancedTrackingProtectionEnabled = 81 [default = false];
  optional bool isGlobalPrivacyControlEnabled = 82 [default = false]; // tell websites not to share & sell data
  optional TrackingProtectionDefault selectedTrackingProtection = 83 [default = STANDARD];
  optional CustomTrackingProtection customTrackingProtection = 84;
  // exceptions managed through Core by LoginExceptionStorage


  // https-only mode settings
  enum HttpsOnlyMode {
    HTTPS_ONLY_DISABLED = 0;
    HTTPS_ONLY_ENABLED = 2;
    HTTPS_ONLY_ENABLED_PRIVATE_ONLY = 3;
  }

  optional HttpsOnlyMode httpsOnlyMode = 85 [default = HTTPS_ONLY_DISABLED];


}