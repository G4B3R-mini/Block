syntax = "proto3";

option java_package = "com.shmibblez.inferno.proto";
option java_multiple_files = true;

message InfernoSettings {


  // todo: add missing settings, renumber when complete


  /*** vars ***/


  uint64 numberOfAppLaunches = 1;
  uint64 lastBrowseActivityMs = 2;


  /*** toolbar settings ***/


  enum VerticalToolbarPosition {
    TOOLBAR_BOTTOM = 0;
    TOOLBAR_TOP = 1;
  }
  enum ToolbarItem {
    TOOLBAR_ITEM_SETTINGS = 0;
    TOOLBAR_ITEM_ORIGIN = 1;
    TOOLBAR_ITEM_ORIGIN_MINI = 2;
    TOOLBAR_ITEM_BACK = 3;
    TOOLBAR_ITEM_FORWARD = 4;
    TOOLBAR_ITEM_RELOAD = 5;
    TOOLBAR_ITEM_HISTORY = 6;
    TOOLBAR_ITEM_REQUEST_DESKTOP = 7;
    TOOLBAR_ITEM_FIND_IN_PAGE = 8;
    TOOLBAR_ITEM_REQUEST_READER_VIEW = 9;
    TOOLBAR_ITEM_PRIVATE_MODE = 10;
    TOOLBAR_ITEM_SHOW_TABS_TRAY = 11;
    TOOLBAR_ITEM_SHARE = 12;
    TOOLBAR_ITEM_MENU = 13;
  }

  // general
  VerticalToolbarPosition toolbarVerticalPosition = 3;
  VerticalToolbarPosition inAppToolbarVerticalPosition = 4;
  repeated ToolbarItem toolbarItems = 5;


  /*** tab settings ***/


  enum VerticalTabBarPosition {
    TAB_BAR_BOTTOM = 0;
    TAB_BAR_TOP = 1;
  }
  enum TabTrayStyle {
    TAB_TRAY_LIST = 0;
    TAB_TRAY_GRID = 1;
  }
  enum TabBarPosition {
    TAB_BAR_ABOVE_TOOLBAR = 0;
    TAB_BAR_BELOW_TOOLBAR = 1;
  }
  enum CloseTabsMethod {
    CLOSE_TABS_MANUALLY = 0;
    CLOSE_TABS_AFTER_ONE_DAY = 1;
    CLOSE_TABS_AFTER_ONE_WEEK = 2;
    CLOSE_TABS_AFTER_ONE_MONTH = 3;
  }
  enum MiniTabShowClose {
    MINI_TAB_SHOW_ON_ALL = 0;
    MINI_TAB_SHOW_ONLY_ON_ACTIVE = 1;
    MINI_TAB_SHOW_ON_NONE = 2;
  }

  // general
  CloseTabsMethod closeTabsMethod = 17;
  //  uint32 closeTabsAfterDays = 5; // todo: test with custom time in MS first, replacing settings.getTabTimeout() in BrowserApplication
  bool shouldSeparateInactiveTabs = 18;
  //  uint32 makeTabsInactiveAfterDays = 22;

  // tab bar
  bool isTabBarEnabled = 19;
  MiniTabShowClose miniTabShowClose = 20;
  VerticalTabBarPosition tabBarVerticalPosition = 21;
  TabBarPosition tabBarPosition = 22;

  // tab tray
  TabTrayStyle tabTrayStyle = 25;


  /*** search settings ***/


  // address bar settings
  // todo: make enum
  string defaultSearchEngine = 6;
  // todo: custom search engine map { [engine name]: [engine data] }
  bool shouldAutocompleteUrls = 7;
  bool shouldAutocompleteUrlsInPrivate = 8;
  bool shouldShowSearchSuggestions = 9;
  bool shouldShowSearchSuggestionsInPrivate = 10;
  bool shouldShowHistorySuggestions = 11;
  bool shouldShowBookmarkSuggestions = 12;
  bool shouldShowSyncedTabsSuggestions = 13;
  bool shouldShowClipboardSuggestions = 14;
  bool shouldShowVoiceSearch = 15;
  //  bool shouldShowSearchShortcuts = 16; // on awesomebar, not used, might need to add later?
  // bool showSponsoredSuggestions = ?; // sponsored not enabled


  /*** theme settings ***/


  enum DefaultTheme {
    // default themes set in kotlin as default objects
    INFERNO_DARK = 0;
    INFERNO_LIGHT = 1;
  }
  message InfernoTheme {
    // todo: define and use colors, take a look at material for some naming ideas
    // in settings show description for where each color is shown
    string name = 1;
    uint32 primaryTextColor = 2;
    uint32 secondaryTextColor = 3;
    uint32 primaryIconColor = 4;
    uint32 secondaryIconColor = 5;
    uint32 primaryOutlineColor = 6;
    uint32 secondaryOutlineColor = 7;
    uint32 primaryActionColor = 8;
    uint32 secondaryActionColor = 9;
    uint32 errorColor = 10;
    uint32 primaryBackgroundColor = 11;
    uint32 secondaryBackgroundColor = 12;
  }

  DefaultTheme selectedDefaultTheme = 30;
  string selectedCustomTheme = 31;
  // { [theme name set by user]: [theme data] }
  map<string, InfernoTheme> customThemes = 32;


  /*** gesture settings ***/


  bool isPullToRefreshEnabled = 23;
  bool isDynamicToolbarEnabled = 27;
  bool isSwipeHorizontalToSwitchTabsEnabled = 28;
  bool isSwipeUpToCloseTabEnabled = 29;


  /*** home screen settings ***/


  enum PageWhenBrowserReopened {
    OPEN_ON_LAST_TAB = 0;
    OPEN_ON_HOME_ALWAYS = 1;
    OPEN_ON_HOME_AFTER_FOUR_HOURS = 2;
  }

  // general
  bool defaultTopSitesAdded = 33;
  bool shouldShowTopSites = 34;
  // bool contile = ? // sponsored suggestions not shown
  bool shouldShowRecentTabs = 35;
  bool shouldShowBookmarks = 36;
  // bool showPocketRecommendations = ? // pocket recommendations not implemented
  // bool showPocketSponsoredStories = ? // pocket recommendations not implemented
  bool shouldShowHistory = 37;
  bool shouldShowSearchWidget = 38;

  // navigation
  PageWhenBrowserReopened pageWhenBrowserReopened = 39;
  bool shouldUseInfernoHome = 40;
  string homeUrl = 41;


  /*** general ***/


  // on quit
  bool deleteBrowsingDataOnQuit = 42;
  bool deleteOpenTabsOnQuit = 43;
  bool deleteBrowsingHistoryOnQuit = 44;
  bool deleteCookiesAndSiteDataOnQuit = 45;
  bool deleteCachesOnQuit = 46;
  bool deletePermissionsOnQuit = 47;
  bool deleteDownloadsOnQuit = 48;

  // other
  bool shouldUseExternalDownloadManager = 49;
  bool remoteDebuggingOverUsb = 50;


  /*** autofill data ***/


  enum LoginsStorage {
    ASK_TO_SAVE = 0;
    DONT_SAVE = 1;
  }

  // login storage
  LoginsStorage saveLoginsSettings = 51;
  bool shouldSyncLogins = 52;
  bool shouldAutofillLogins = 53;
  bool isAndroidAutofillEnabled = 54; // autofill in other apps
  bool isAddressSaveAndAutofillEnabled = 55;
  bool isCardSaveAndAutofillEnabled = 56;
  bool shouldSyncCards = 57;
  // managed in Core by LoginExceptionStorage


  /*** site settings ***/


  // site settings
  enum AppLinks {
    APP_LINKS_ASK_TO_OPEN = 0;
    APP_LINKS_ALLOWED = 1;
    APP_LINKS_BLOCKED = 2;
  }
  enum AutoPlay {
    BLOCK_AUDIO_ONLY = 0;
    BLOCK_AUDIO_AND_VIDEO = 1;
    ALLOW_AUDIO_AND_VIDEO = 2;
    BLOCK_AUDIO_AND_VIDEO_ON_CELLULAR_DATA_ONLY = 3;
  }
  enum Camera {
    CAMERA_ASK_TO_ALLOW = 0;
    CAMERA_ALLOWED = 1;
    CAMERA_BLOCKED = 2;
  }
  enum Location {
    LOCATION_ASK_TO_ALLOW = 0;
    LOCATION_ALLOWED = 1;
    LOCATION_BLOCKED = 2;
  }
  enum Microphone {
    MICROPHONE_ASK_TO_ALLOW = 0;
    MICROPHONE_ALLOWED = 1;
    MICROPHONE_BLOCKED = 2;
  }
  enum Notifications {
    NOTIFICATIONS_ASK_TO_ALLOW = 0;
    NOTIFICATIONS_ALLOWED = 1;
    NOTIFICATIONS_BLOCKED = 2;
  }
  enum PersistentStorage {
    PERSISTENT_STORAGE_ASK_TO_ALLOW = 0;
    PERSISTENT_STORAGE_ALLOWED = 1;
    PERSISTENT_STORAGE_BLOCKED = 2;
  }
  enum CrossSiteCookies {
    CROSS_SITE_COOKIES_ASK_TO_ALLOW = 0;
    CROSS_SITE_COOKIES_ALLOWED = 1;
    CROSS_SITE_COOKIES_BLOCKED = 2;
  }
  enum DrmControlledContent {
    DRM_CONTROLLED_CONTENT_ASK_TO_ALLOW = 0;
    DRM_CONTROLLED_CONTENT_ALLOWED = 1;
    DRM_CONTROLLED_CONTENT_BLOCKED = 2;
  }

  // site permissions
  AppLinks appLinksSetting = 58;
  AutoPlay autoplaySetting = 59;
  Camera cameraSetting = 60;
  Location locationSetting = 61;
  Microphone microphoneSetting = 62;
  Notifications notificationsSetting = 63;
  PersistentStorage persistentStorageSetting = 64;
  CrossSiteCookies crossSiteCookiesSetting = 65;
  DrmControlledContent drmControlledContentSetting = 66;
  // exceptions managed through Core by PermissionStorage


  /*** accessibility ***/


  bool shouldSizeFontAutomatically = 67;
  float fontSizeFactor = 68;
  bool shouldForceEnableZoomInWebsites = 69;
  bool alwaysRequestDesktopSite = 70;


  /*** locale/language is set through Storage with LocaleManager ***/


  /*** translation is managed through browserStore with TranslationsAction ***/


  /*** private mode settings ***/


  bool openLinksInPrivateTab = 71;
  bool allowScreenshotsInPrivateMode = 72;


  /*** enhanced tracking protection settings ***/


  enum TrackingProtectionDefault {
    STANDARD = 0;
    STRICT = 1;
    CUSTOM = 2;
  }
  message CustomTrackingProtection {
    enum CookiePolicy {
      NONE = 0;
      ISOLATE_CROSS_SITE_COOKIES = 1;
      CROSS_SITE_AND_SOCIAL_MEDIA_TRACKERS = 2;
      COOKIES_FROM_UNVISITED_SITES = 3;
      ALL_THIRD_PARTY_COOKIES = 4;
      ALL_COOKIES = 5;
    }
    CookiePolicy blockCustomCookies = 73;
    bool trackingContentBlockedInNormalMode = 74; // in normal mode
    bool trackingContentBlockedInPrivateMode = 75; // in private mode
    bool blockCryptominers = 76;
    bool blockKnownFingerprinters = 77;
    bool blockRedirectTrackers = 78;
    bool blockSuspectedFingerPrintersInNormalMode = 79; // in normal mode
    bool blockSuspectedFingerPrintersInPrivateMode = 80; // in private mode
  }

  bool isEnhancedTrackingProtectionEnabled = 81;
  bool isGlobalPrivacyControlEnabled = 82; // tell websites not to share & sell data
  TrackingProtectionDefault selectedTrackingProtection = 83;
  CustomTrackingProtection customTrackingProtection = 84;
  // exceptions managed through Core by LoginExceptionStorage


  /*** https-only mode settings ***/


  enum HttpsOnlyMode {
    HTTPS_ONLY_DISABLED = 0;
    HTTPS_ONLY_ENABLED = 2;
    HTTPS_ONLY_ENABLED_PRIVATE_ONLY = 3;
  }

  HttpsOnlyMode httpsOnlyMode = 85;


}