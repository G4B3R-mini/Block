/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

plugins {
//    id("com.jetbrains.python.envs") version "0.0.31"
    alias libs.plugins.android.application
    alias libs.plugins.compose.compiler
    alias libs.plugins.dependency.analysis
    alias libs.plugins.kotlin.android
    id 'androidx.navigation.safeargs.kotlin'
    id 'kotlin-parcelize'
}

apply from: "$project.rootDir/automation/gradle/versionCode.gradle"

import com.android.build.api.variant.FilterConfiguration
import com.android.build.gradle.internal.tasks.AppPreBuildTask
import groovy.json.JsonOutput

int a = 0;

android {
    defaultConfig {
        applicationId "com.shmibblez.inferno"
        minSdkVersion Config.minSdkVersion
        compileSdk Config.compileSdkVersion
        targetSdkVersion Config.targetSdkVersion
        versionCode 1
        versionName Config.generateDebugVersionName()
        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'

        resValue "bool", "IS_DEBUG", "false"
        buildConfigField "boolean", "USE_RELEASE_VERSIONING", "false"
        buildConfigField "String", "VCS_HASH", "\"\""
        // see override in release builds for why it's blank.
        // This should be the "public" base URL of AMO.
        buildConfigField "String", "AMO_BASE_URL", "\"https://addons.mozilla.org\""
        buildConfigField "String", "AMO_COLLECTION_NAME", "\"Extensions-for-Android\""
        buildConfigField "String", "AMO_COLLECTION_USER", "\"mozilla\""
        // These add-ons should be excluded for Mozilla Online builds.
        buildConfigField "String[]", "MOZILLA_ONLINE_ADDON_EXCLUSIONS",
                "{" + "\"uBlock0@raymondhill.net\"," + "\"firefox@ghostery.com\"," + "\"jid1-MnnxcxisBPnSXQ@jetpack\"," + "\"adguardadblocker@adguard.com\"," + "\"foxyproxy@eric.h.jung\"," + "\"{73a6fe31-595d-460b-a920-fcc0f8843232}\"," + "\"jid1-BoFifL9Vbdl2zQ@jetpack\"," + "\"woop-NoopscooPsnSXQ@jetpack\"," + "\"adnauseam@rednoise.org\"" + "}"
        // This should be the base URL used to call the AMO API.
        buildConfigField "String", "AMO_SERVER_URL", "\"https://services.addons.mozilla.org\""

        def deepLinkSchemeValue = "fenix-dev"
        buildConfigField "String", "DEEP_LINK_SCHEME", "\"$deepLinkSchemeValue\""

        // This allows overriding the target activity for MozillaOnline builds, which happens
        // as part of the defaultConfig below.
        def targetActivity = "HomeActivity"

        // Build flag for "Mozilla Online" variants. See `Config.isMozillaOnline`.
        if (project.hasProperty("mozillaOnline") || gradle.hasProperty("localProperties.mozillaOnline")) {
            buildConfigField "boolean", "MOZILLA_ONLINE", "true"
            targetActivity = "MozillaOnlineHomeActivity"
        } else {
            buildConfigField "boolean", "MOZILLA_ONLINE", "false"
        }

        manifestPlaceholders = ["targetActivity": targetActivity,
                                "deepLinkScheme": deepLinkSchemeValue]

        buildConfigField "String[]", "SUPPORTED_LOCALE_ARRAY", getSupportedLocales()
    }

    def releaseTemplate = {
        minifyEnabled true
        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        matchingFallbacks = ['release'] // Use on the "release" build type in dependencies (AARs)

        if (gradle.hasProperty("localProperties.autosignReleaseWithDebugKey")) {
            signingConfig signingConfigs.debug
        }

        if (gradle.hasProperty("localProperties.debuggable")) {
            debuggable true
        }
    }

    buildFeatures {
        compose true
        buildConfig true
        viewBinding true
    }

    buildTypes {
        release {
            minifyEnabled true
            applicationIdSuffix ".release"
        }
        debug {
            minifyEnabled false
            applicationIdSuffix ".debug"
        }
        raptor releaseTemplate >> {
            // the ">>" concatenates the raptor-specific options with the template
            applicationIdSuffix ".raptor"
            manifestPlaceholders.isRaptorEnabled = "true"
            matchingFallbacks = ['release']
        }
        nightly releaseTemplate >> {
            buildConfigField "boolean", "IS_RELEASED", "true"
        }
    }

    variantFilter {
        // There's a "release" build type that exists by default that we don't use (it's replaced by "nightly" and "beta")
        if (buildType.name == 'release') {
            setIgnore true
        }
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled = true
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/atomicfu.kotlin_module']
        }
    }


    splits {
        abi {
            enable true

            reset()

            include "x86", "armeabi-v7a", "arm64-v8a", "x86_64"
        }
    }

    namespace 'com.shmibblez.inferno'
    lint {
        baseline file('lint-baseline.xml')
        disable 'GradleDependency', 'AndroidGradlePluginVersion'
        lintConfig file('lint.xml')
    }
}

kotlin {
    jvmToolchain(Config.jvmTargetCompatibility)
}

def baseVersionCode = generatedVersionCode

if (gradle.hasProperty('localProperties.dependencySubstitutions.geckoviewTopsrcdir')) {
    if (gradle.hasProperty('localProperties.dependencySubstitutions.geckoviewTopobjdir')) {
        ext.topobjdir = gradle."localProperties.dependencySubstitutions.geckoviewTopobjdir"
    }
    ext.topsrcdir = gradle."localProperties.dependencySubstitutions.geckoviewTopsrcdir"
    apply from: "${topsrcdir}/substitute-local-geckoview.gradle"
}

android.applicationVariants.configureEach { variant ->

// -------------------------------------------------------------------------------------------------
// Sentry: Read token from local file if it exists (Only release builds)
// -------------------------------------------------------------------------------------------------
    print("Sentry token:  " + variant.name)
    try {
        def token = new File("${rootDir}/.sentry_token").text.trim()
        buildConfigField 'String', 'SENTRY_TOKEN', '"' + token + '"'
        println "(Added from .sentry_token file)"
    } catch (FileNotFoundException ignored) {
        buildConfigField 'String', 'SENTRY_TOKEN', 'null'
        println(" :( ")
    }

// -------------------------------------------------------------------------------------------------
// Activating crash reports with command line parameter.
// -------------------------------------------------------------------------------------------------
    if (project.hasProperty("crashReportEnabled") && project.property("crashReportEnabled") == "true") {
        buildConfigField 'boolean', 'CRASH_REPORTING_ENABLED', 'true'
    } else {
        buildConfigField 'boolean', 'CRASH_REPORTING_ENABLED', 'false'
    }

// -------------------------------------------------------------------------------------------------
// Activating telemetry  with command line paramter.
// -------------------------------------------------------------------------------------------------

    if (project.hasProperty("telemetry") && project.property("telemetry") == "true") {
        buildConfigField 'boolean', 'TELEMETRY_ENABLED', 'true'
    } else {
        buildConfigField 'boolean', 'TELEMETRY_ENABLED', 'false'
    }

// -------------------------------------------------------------------------------------------------
// Generating version codes for Google Play
// -------------------------------------------------------------------------------------------------
    if (variant.buildType.buildConfigFields['IS_RELEASED']?.value) {
        // The Google Play Store does not allow multiple APKs for the same app that all have the
        // same version code. Therefore we need to have different version codes for our ARM and x86
        // builds. See https://developer.android.com/studio/publish/versioning

        // Our x86 builds need a higher version code to avoid installing ARM builds on an x86 device
        // with ARM compatibility mode.

        // AAB builds need a version code that is distinct from any APK builds. Since AAB and APK
        // builds may run in parallel, AAB and APK version codes might be based on the same
        // (minute granularity) time of day. To avoid conflicts, we ensure the minute portion
        // of the version code is even for APKs and odd for AABs.

        def versionName = Config.releaseVersionName(project)

        variant.outputs.each { output ->
            def abi = output.getFilter(FilterConfiguration.FilterType.ABI.name())
            def aab = project.hasProperty("aab")

            // ensure baseVersionCode is an even number
            if (baseVersionCode % 2) {
                baseVersionCode = baseVersionCode + 1
            }

            def versionCodeOverride = baseVersionCode

            if (aab) {
                // AAB version code is odd
                versionCodeOverride = baseVersionCode + 1
                println("versionCode for AAB = $versionCodeOverride")
            } else {
                // APK version codes are even
                if (abi == "x86_64") {
                    versionCodeOverride = baseVersionCode + 6
                } else if (abi == "x86") {
                    versionCodeOverride = baseVersionCode + 4
                } else if (abi == "arm64-v8a") {
                    versionCodeOverride = baseVersionCode + 2
                } else if (abi == "armeabi-v7a") {
                    versionCodeOverride = baseVersionCode
                }
                println("versionCode for $abi = $versionCodeOverride")
            }

            output.versionNameOverride = versionName
            output.versionCodeOverride = versionCodeOverride
        }

        // If this is a release build, validate that "versionName" is set
        tasks.withType(AppPreBuildTask).configureEach { prebuildTask ->
            // You can't add a closure to a variant, so we need to look for an early variant-specific type
            // of task (AppPreBuildTask is the first) and filter to make sure we're looking at the task for
            // this variant that we're currently configuring
            if (prebuildTask.variantName != variant.name) {
                return
            }

            // Append to the task so the first thing it does is run our validation
            prebuildTask.doFirst {
                if (!project.hasProperty('versionName')) {
                    throw new RuntimeException("Release builds require the 'versionName' property to be set.\n" + "If you're using an IDE, set your build variant to be a \"debug\" type.\n" + "If you're using the command-line, either build a debug variant instead ('./gradlew assembleDebug')\n" + "\tor continue building the release build and set the \"versionName\" property ('./gradlew -PversionName=<...> assembleNightly').")
                    // TODO when Android Studio 3.5.0 is prevalent, we can set the "debug" build type as the default
                    // https://issuetracker.google.com/issues/36988145#comment59
                }
            }
        }
    }

// -------------------------------------------------------------------------------------------------
// BuildConfig: Set flag for official builds; similar to MOZILLA_OFFICIAL in mozilla-central.
// -------------------------------------------------------------------------------------------------

    if (project.hasProperty("official") || gradle.hasProperty("localProperties.official")) {
        buildConfigField 'Boolean', 'MOZILLA_OFFICIAL', 'true'
    } else {
        buildConfigField 'Boolean', 'MOZILLA_OFFICIAL', 'false'
    }
}

// Select the Glean from GeckoView.
// `service-sync-logins` requires Glean, which pulls in glean-native,
// but that's also provided by geckoview-omni, so now we need to select which one to use.
project.configurations.configureEach {
    resolutionStrategy.capabilitiesResolution.withCapability("org.mozilla.telemetry:glean-native") {
        def toBeSelected = candidates.find { it.id instanceof ModuleComponentIdentifier && it.id.module.contains('geckoview') }
        if (toBeSelected != null) {
            select(toBeSelected)
        }
        because 'use GeckoView Glean instead of standalone Glean'
    }
}


android.applicationVariants.configureEach { variant ->

// -------------------------------------------------------------------------------------------------
// Generate version codes for builds
// -------------------------------------------------------------------------------------------------

    def isDebug = variant.buildType.resValues['bool/IS_DEBUG']?.value ?: false
    def useReleaseVersioning = variant.buildType.buildConfigFields['USE_RELEASE_VERSIONING']?.value ?: false

    println("----------------------------------------------")
    println("Variant name:      " + variant.name)
    println("Application ID:    " + [variant.applicationId, variant.buildType.applicationIdSuffix].findAll().join())
    println("Build type:        " + variant.buildType.name)
    println("Flavor:            " + variant.flavorName)
    println("Telemetry enabled: " + !isDebug)

    if (useReleaseVersioning) {
        // The Google Play Store does not allow multiple APKs for the same app that all have the
        // same version code. Therefore we need to have different version codes for our ARM and x86
        // builds.

        def versionName = variant.buildType.name == 'nightly' ?
                "${Config.nightlyVersionName(project)}" :
                "${Config.releaseVersionName(project)}"
        println("versionName override: $versionName")

        variant.outputs.each { output ->
            def isMozillaOnline = project.hasProperty("mozillaOnline") || gradle.hasProperty("localProperties.mozillaOnline")
            def abi = output.getFilter(FilterConfiguration.FilterType.ABI.name())
            // If it is a Mozilla Online build, use a unified version code of armeabi-v7a
            def arch = (isMozillaOnline) ? "armeabi-v7a" : abi
            def aab = project.hasProperty("aab")
            // We use the same version code generator, that we inherited from Fennec, across all channels - even on
            // channels that never shipped a Fennec build.
            def versionCodeOverride = Config.generateFennecVersionCode(arch, aab)

            println("versionCode for $abi = $versionCodeOverride, isMozillaOnline = $isMozillaOnline")

            if (versionName != null) {
                output.versionNameOverride = versionName
            }
            output.versionCodeOverride = versionCodeOverride
        }
    } else if (gradle.hasProperty("localProperties.branchBuild.fenix.version")) {
        def versionName = gradle.getProperty("localProperties.branchBuild.fenix.version")
        println("versionName override: $versionName")
        variant.outputs.each { output ->
            output.versionNameOverride = versionName
        }
    }

//// -------------------------------------------------------------------------------------------------
//// BuildConfig: Set variables for Sentry, Crash Reporting, and Telemetry
//// -------------------------------------------------------------------------------------------------
//
//    buildConfigField 'String', 'SENTRY_TOKEN', 'null'
//    if (!isDebug) {
//        buildConfigField 'boolean', 'CRASH_REPORTING', 'true'
//        // Reading sentry token from local file (if it exists). In a release task on taskcluster it will be available.
//        try {
//            def token = new File("${rootDir}/.sentry_token").text.trim()
//            buildConfigField 'String', 'SENTRY_TOKEN', '"' + token + '"'
//        } catch (FileNotFoundException ignored) {
//        }
//    } else {
//        buildConfigField 'boolean', 'CRASH_REPORTING', 'false'
//    }
//
//    if (!isDebug) {
//        buildConfigField 'boolean', 'TELEMETRY', 'true'
//    } else {
//        buildConfigField 'boolean', 'TELEMETRY', 'false'
//    }
//
//    def buildDate = Config.generateBuildDate()
//    // Setting buildDate with every build changes the generated BuildConfig, which slows down the
//    // build. Only do this for non-debug builds, to speed-up builds produced during local development.
//    if (isDebug) {
//        buildConfigField 'String', 'BUILD_DATE', '"debug build"'
//    } else {
//        buildConfigField 'String', 'BUILD_DATE', '"' + buildDate + '"'
//    }

// -------------------------------------------------------------------------------------------------
// Adjust: Read token from local file if it exists (Only release builds)
// -------------------------------------------------------------------------------------------------

    print("Adjust token: ")

    if (!isDebug) {
        try {
            def token = new File("${rootDir}/.adjust_token").text.trim()
            buildConfigField 'String', 'ADJUST_TOKEN', '"' + token + '"'
            println "(Added from .adjust_token file)"
        } catch (FileNotFoundException ignored) {
            buildConfigField 'String', 'ADJUST_TOKEN', 'null'
            println("X_X")
        }
    } else {
        buildConfigField 'String', 'ADJUST_TOKEN', 'null'
        println("--")
    }

// -------------------------------------------------------------------------------------------------
// MLS: Read token from local file if it exists
// -------------------------------------------------------------------------------------------------

    print("MLS token: ")

    try {
        def token = new File("${rootDir}/.mls_token").text.trim()
        buildConfigField 'String', 'MLS_TOKEN', '"' + token + '"'
        println "(Added from .mls_token file)"
    } catch (FileNotFoundException ignored) {
        buildConfigField 'String', 'MLS_TOKEN', '""'
        println("X_X")
    }

// -------------------------------------------------------------------------------------------------
// Nimbus: Read endpoint from local.properties of a local file if it exists
// -------------------------------------------------------------------------------------------------

    print("Nimbus endpoint: ")

//    if (!isDebug) { // no endpoint, not used for metrics
//        try {
//            def url = new File("${rootDir}/.nimbus").text.trim()
//            buildConfigField 'String', 'NIMBUS_ENDPOINT', '"' + url + '"'
//            println "(Added from .nimbus file)"
//        } catch (FileNotFoundException ignored) {
//            buildConfigField 'String', 'NIMBUS_ENDPOINT', 'null'
//            println("X_X")
//        }
//    } else if (gradle.hasProperty("localProperties.nimbus.remote-settings.url")) {
//        def url = gradle.getProperty("localProperties.nimbus.remote-settings.url")
//        buildConfigField 'String', 'NIMBUS_ENDPOINT', '"' + url + '"'
//        println "(Added from local.properties file)"
//    } else {
        buildConfigField 'String', 'NIMBUS_ENDPOINT', 'null'
        println("--")
//    }

//// -------------------------------------------------------------------------------------------------
//// Glean: Read custom server URL from local.properties of a local file if it exists
//// -------------------------------------------------------------------------------------------------
//
//    print("Glean custom server URL: ")
//
//    if (gradle.hasProperty("localProperties.glean.custom.server.url")) {
//        def url = gradle.getProperty("localProperties.glean.custom.server.url")
//        buildConfigField 'String', 'GLEAN_CUSTOM_URL', url
//        println "(Added from local.properties file)"
//    } else {
//        buildConfigField 'String', 'GLEAN_CUSTOM_URL', 'null'
//        println("--")
//    }

// -------------------------------------------------------------------------------------------------
// BuildConfig: Set flag for official builds; similar to MOZILLA_OFFICIAL in mozilla-central.
// -------------------------------------------------------------------------------------------------

    if (project.hasProperty("official") || gradle.hasProperty("localProperties.official")) {
        buildConfigField 'Boolean', 'MOZILLA_OFFICIAL', 'true'
    } else {
        buildConfigField 'Boolean', 'MOZILLA_OFFICIAL', 'false'
    }

// -------------------------------------------------------------------------------------------------
// BuildConfig: Set remote wallpaper URL using local file if it exists
// -------------------------------------------------------------------------------------------------

    print("Wallpaper URL: ")

    try {
        def token = new File("${rootDir}/.wallpaper_url").text.trim()
        buildConfigField 'String', 'WALLPAPER_URL', '"' + token + '"'
        println "(Added from .wallpaper_url file)"
    } catch (FileNotFoundException ignored) {
        buildConfigField 'String', 'WALLPAPER_URL', '""'
        println("--")
    }

//// -------------------------------------------------------------------------------------------------
//// BuildConfig: Set the Pocket consumer key from a local file if it exists
//// -------------------------------------------------------------------------------------------------
//
//    print("Pocket consumer key: ")
//
//    try {
//        def token = new File("${rootDir}/.pocket_consumer_key").text.trim()
//        buildConfigField 'String', 'POCKET_CONSUMER_KEY', '"' + token + '"'
//        println "(Added from .pocket_consumer_key file)"
//    } catch (FileNotFoundException ignored) {
//        buildConfigField 'String', 'POCKET_CONSUMER_KEY', '""'
//        println("--")
//    }

// -------------------------------------------------------------------------------------------------
// BuildConfig: Set flag to disable LeakCanary in debug (on CI builds)
// -------------------------------------------------------------------------------------------------

    if (isDebug) {
        if (project.hasProperty("disableLeakCanary") || gradle.hasProperty("localProperties.disableLeakCanary")) {
            buildConfigField "boolean", "LEAKCANARY", "false"
            println("LeakCanary enabled in debug: false")
        } else {
            buildConfigField "boolean", "LEAKCANARY", "true"
            println("LeakCanary enabled in debug: true")
        }
    } else {
        buildConfigField "boolean", "LEAKCANARY", "false"
    }
}

apply plugin: "org.mozilla.appservices.nimbus-gradle-plugin"

nimbus {
    // The path to the Nimbus feature manifest file
    manifestFile = "nimbus.fml.yaml"
    // The fully qualified class name for the generated features.
    // Map from the variant name to the channel as experimenter and nimbus understand it.
    // If nimbus's channels were accurately set up well for this project, then this
    // shouldn't be needed.
    channels = [
            fenixDebug    : "developer",
            fenixNightly  : "nightly",
            fenixBeta     : "beta",
            fenixRelease  : "release",
            fenixBenchmark: "developer",
    ]
    // This is generated by the FML and should be checked into git.
    // It will be fetched by Experimenter (the Nimbus experiment website)
    // and used to inform experiment configuration.
    experimenterManifest = ".experimenter.yaml"
    applicationServicesDir = gradle.hasProperty('localProperties.autoPublish.application-services.dir')
            ? gradle.getProperty('localProperties.autoPublish.application-services.dir') : null
}


dependencies {
    implementation libs.androidx.activity
    implementation libs.androidx.annotation
    implementation libs.androidx.appcompat
    implementation libs.androidx.browser
    implementation libs.androidx.cardview
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.coordinatorlayout
    implementation libs.androidx.core.ktx
    implementation libs.androidx.datastore.preferences
    implementation libs.androidx.fragment
    implementation libs.androidx.lifecycle.common
    implementation libs.androidx.lifecycle.compose
    implementation libs.androidx.lifecycle.process
    implementation libs.androidx.lifecycle.viewmodel
    implementation libs.androidx.preference.ktx
    implementation libs.androidx.recyclerview
    implementation libs.androidx.swiperefreshlayout
    implementation libs.androidx.work.runtime.ktx

    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.compose.foundation
    implementation libs.androidx.compose.material3
    implementation libs.androidx.navigation.compose
    implementation libs.androidx.navigation.fragment
    implementation libs.androidx.compose.runtime
    implementation libs.androidx.compose.ui.base
    implementation libs.androidx.compose.ui.graphics
    implementation libs.androidx.compose.ui.text
    implementation libs.androidx.compose.ui.tooling
    implementation libs.androidx.paging.common.android
    implementation libs.androidx.core.splashscreen
    implementation libs.androidx.navigation.ui.ktx
    implementation libs.androidx.paging.runtime.ktx
    implementation libs.androidx.biometric.ktx
    implementation libs.androidx.lifecycle.service

    testImplementation libs.androidx.paging.common

    // Android Studio Preview support
    implementation libs.androidx.ui.tooling.preview
    // UI Tests
//    androidTestImplementation libs.androidx.ui.test.junit4
    debugImplementation libs.androidx.ui.test.manifest
    // Optional - Integration with activities
    implementation libs.androidx.activity.compose
//    // Optional - Integration with ViewModels
//    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.8.5'
//    // Optional - Integration with LiveData
//    implementation 'androidx.compose.runtime:runtime-livedata'
//    // Optional - Integration with RxJava
//    implementation 'androidx.compose.runtime:runtime-rxjava2'

    implementation libs.google.material
    implementation libs.accompanist.drawablepainter

    implementation libs.kotlinx.coroutines.core

    implementation libs.mozilla.browser.domains
    implementation libs.mozilla.browser.engine.gecko
    implementation libs.mozilla.browser.errorpages
    implementation libs.mozilla.browser.icons
    implementation libs.mozilla.browser.menu
    implementation libs.mozilla.browser.menu2
    implementation libs.mozilla.browser.session.storage
//    implementation libs.mozilla.browser.search
    implementation libs.mozilla.browser.state

    implementation libs.mozilla.browser.storage.sync
    implementation libs.mozilla.browser.tabstray
    implementation libs.mozilla.browser.thumbnails
    implementation libs.mozilla.browser.toolbar

    implementation libs.mozilla.compose.awesomebar
//    implementation libs.mozilla.compose.base
    implementation libs.mozilla.compose.cfr

    implementation libs.mozilla.concept.awesomebar
    implementation libs.mozilla.concept.base
    implementation libs.mozilla.concept.engine
    implementation libs.mozilla.concept.fetch
    implementation libs.mozilla.concept.menu
    implementation libs.mozilla.concept.push
    implementation libs.mozilla.concept.storage
    implementation libs.mozilla.concept.sync
    implementation libs.mozilla.concept.toolbar

    implementation libs.mozilla.feature.accounts.base
    implementation libs.mozilla.feature.accounts.push
    implementation libs.mozilla.feature.addons
    implementation libs.mozilla.feature.app.links
    implementation libs.mozilla.feature.awesomebar
    implementation libs.mozilla.feature.autofill
    implementation libs.mozilla.feature.contextmenu
    implementation libs.mozilla.feature.customtabs
    implementation libs.mozilla.feature.downloads
    implementation libs.mozilla.feature.findinpage
    implementation libs.mozilla.feature.fxsuggest
    implementation libs.mozilla.feature.intent
    implementation libs.mozilla.feature.logins
    implementation libs.mozilla.feature.media
    implementation libs.mozilla.feature.privatemode
    implementation libs.mozilla.feature.prompts
    implementation libs.mozilla.feature.push
    implementation libs.mozilla.feature.pwa
    implementation libs.mozilla.feature.qr
    implementation libs.mozilla.feature.readerview
    implementation libs.mozilla.feature.recentlyclosed
    implementation libs.mozilla.feature.search
    implementation libs.mozilla.feature.session
    implementation libs.mozilla.feature.share
    implementation libs.mozilla.feature.sitepermissions
    implementation libs.mozilla.feature.syncedtabs
    implementation libs.mozilla.feature.tab.collections
    implementation libs.mozilla.feature.tabs
    implementation libs.mozilla.feature.toolbar
    implementation libs.mozilla.feature.top.sites
    implementation libs.mozilla.feature.webauthn
    implementation libs.mozilla.feature.webcompat
    implementation libs.mozilla.feature.webcompat.reporter
    implementation libs.mozilla.feature.webnotifications

    implementation libs.mozilla.lib.crash.base
    implementation libs.mozilla.lib.crash.sentry
    implementation libs.mozilla.lib.dataprotect
    implementation libs.mozilla.lib.publicsuffixlist
    implementation libs.mozilla.lib.push.firebase
    implementation libs.mozilla.lib.state

    implementation libs.mozilla.service.contile
    implementation libs.mozilla.service.digitalassetlinks
    implementation libs.mozilla.service.firefox.accounts
    implementation libs.mozilla.service.location
    implementation libs.mozilla.service.nimbus
    implementation libs.mozilla.service.sync.autofill
    implementation libs.mozilla.service.sync.logins

    implementation libs.mozilla.support.base
    implementation libs.mozilla.support.locale
    implementation libs.mozilla.support.ktx
    implementation libs.mozilla.support.rusthttp
    implementation libs.mozilla.support.rustlog
    implementation libs.mozilla.support.utils
    implementation libs.mozilla.support.webextensions

    implementation libs.mozilla.tooling.nimbus.gradle

    implementation libs.mozilla.ui.colors
    implementation libs.mozilla.ui.icons
    implementation libs.mozilla.ui.tabcounter
    implementation libs.mozilla.ui.widgets

    androidTestImplementation libs.androidx.test.espresso.core
    androidTestImplementation libs.androidx.test.espresso.idling.resources
    androidTestImplementation libs.androidx.test.monitor
    androidTestImplementation libs.androidx.test.rules
    androidTestImplementation libs.androidx.test.runner
    androidTestImplementation libs.androidx.test.uiautomator

    androidTestImplementation libs.hamcrest.core
    androidTestImplementation libs.hamcrest.library
    androidTestImplementation libs.junit
    androidTestImplementation libs.mockwebserver
    androidTestImplementation libs.okhttp
//    androidTestImplementation libs.okio

    androidTestUtil libs.androidx.test.orchestrator
}

// -------------------------------------------------------------------------------------------------
// Task for printing APK information for the requested variant
// Usage: ./gradlew printVariants
// -------------------------------------------------------------------------------------------------
tasks.register('printVariants') {
    doLast {
        def variants = android.applicationVariants.collect { variant ->
            [apks      : variant.outputs.collect { output ->
                [abi     : output.getFilter(FilterConfiguration.FilterType.ABI.name()),
                 fileName: output.outputFile.name]
            },
             build_type: variant.buildType.name,
             name      : variant.name,]
        }
        println 'variants: ' + JsonOutput.toJson(variants)
    }
}

tasks.register('printGeckoviewVersion') {
    doLast {
        def configuration = configurations.implementationDependenciesMetadata
        def dependencies = configuration.incoming.resolutionResult.allDependencies
        def geckoviewDependency = dependencies.find { it.selected.id.moduleIdentifier.group == 'org.mozilla.geckoview' }
        println('geckoviewVersion: ' + JsonOutput.toJson(geckoviewDependency.selected.moduleVersion.version))
    }
}

if (gradle.hasProperty('localProperties.dependencySubstitutions.geckoviewTopsrcdir')) {
    if (gradle.hasProperty('localProperties.dependencySubstitutions.geckoviewTopobjdir')) {
        ext.topobjdir = gradle."localProperties.dependencySubstitutions.geckoviewTopobjdir"
    }
    ext.topsrcdir = gradle."localProperties.dependencySubstitutions.geckoviewTopsrcdir"
    apply from: "${topsrcdir}/substitute-local-geckoview.gradle"
}

if (gradle.hasProperty('localProperties.autoPublish.android-components.dir')) {
    ext.acSrcDir = gradle."localProperties.autoPublish.android-components.dir"
    apply from: "../${acSrcDir}/substitute-local-ac.gradle"
}

if (gradle.hasProperty('localProperties.autoPublish.application-services.dir')) {
    ext.appServicesSrcDir = gradle."localProperties.autoPublish.application-services.dir"
    apply from: "../${appServicesSrcDir}/build-scripts/substitute-local-appservices.gradle"
}

def getSupportedLocales() {
    // This isn't running as a task, instead the array is build when the gradle file is parsed.
    // https://github.com/mozilla-mobile/fenix/issues/14175
    def foundLocales = new StringBuilder()
    foundLocales.append("new String[]{")

    fileTree("src/main/res").visit { FileVisitDetails details ->
        if (details.file.path.endsWith("${File.separator}strings.xml")) {
            def languageCode = details.file.parent.tokenize(File.separator).last().replaceAll('values-', '').replaceAll('-r', '-')
            languageCode = (languageCode == "values") ? "en-US" : languageCode
            foundLocales.append("\"").append(languageCode).append("\"").append(",")
        }
    }

    foundLocales.append("}")
    def foundLocalesString = foundLocales.toString().replaceAll(',}', '}')
    return foundLocalesString
}